#test split on split
#remove an organ just before an existing gap of size 1:
seq_remove(test9,2)
seq_remove(test9,4)
seq_remove(test9,3)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
#Test segmentation_errors
test #10 organs
seq=make_refseq(nrow(test$Ialign), alpha, a_sd, i_Gsd, i_noise_pct)
man_MEAS=make_measure(seq, manual_anoise_sd, manual_inoise_sd)
aut_MEAS=make_measure(seq, aut_anoise_sd, aut_inoise_sd)
alpha=137.5
#angle_sd (correspond to real biological variation)
a_sd=18.5
#-> cf Guedon et al. JTB 2013: standard deviation a_sd=18.5
## Internodes
#Internode_noise: gaussian noise: mean=0, sd=i_noise
i_Gsd=0.8
#ratio of the biological noise/variation compared to the value of the internode, expressed in pct
i_noise_pct=75
#Overview of Hard-coded parameters for internodes:
#Exponential decay -> rate
#i_beta=5
#Maximum internode length
#i_max=80
#Likelihood of null internodes: modeled as poisson law with lambda=mean expectancy of the null internode
#i_lambda=1/20
## Permutations
#to be done...
#####
###II. NOISE ON MANUAL MEASURE
#####
#Technical noise has been measured for manual device:
#it looks gaussian, mean error=0 sd ~ 6 / 0.5 for angles/internodes
manual_anoise_sd=6 #(in degree, noise with gaussian distrib. of zero mean)
manual_inoise_sd=0.5 #(in mm, noise with gaussian distrib. of zero mean)
#####
###III. NOISE ON AUTOMATED MEASURE
#####
#From eval v0.4 geom pipe: angles 4times less precise / internodes 5xtimes less precise
aut_anoise_sd=60 #(in degree, noise with gaussian distrib. of zero mean)
aut_inoise_sd=10 #(in mm, noise with gaussian distrib. of zero mean)
#####
###IV. ERRORS of SEGMENTATION
#####
# #Percent of match
# pct=60
# #Count of Merge
# Merge=5
# #Count of split
# Split=2
seq=make_refseq(nrow(test$Ialign), alpha, a_sd, i_Gsd, i_noise_pct)
man_MEAS=make_measure(seq, manual_anoise_sd, manual_inoise_sd)
aut_MEAS=make_measure(seq, aut_anoise_sd, aut_inoise_sd)
multiseq_plot(list(seq, man_MEAS, aut_MEAS))
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
seq_remove(test, 1)
View(test$Ialign)
View(test$Oalign)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
View(aut_MEAS)
seq_insert(test, 1)
seq_append(test,1)
seq_insert(test, 2)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_insert(test, 2)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_insert(test, 2)
seq_insert(test, 1)
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
seq_remove(test,10)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,10)
seq_remove(test,9)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,9)
seq_remove(test,1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,1)
seq_remove(test,9)
seq_remove(test,10)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,10)
seq_remove(test,1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5), )
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5), verbose = TRUE)
unlist(test)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
kikoo=segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
kikoo$values
comp=segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
multiseq_plot(list(seq, man_MEAS, comp$values))
comp$I
multiseq_plot(list(seq, man_MEAS, aut_MEAS, comp$values))
multiseq_plot(list(seq, man_MEAS, aut_MEAS, comp$values), id.names = c("real_biol", "manual", "automated", "with_seg_errors"))
View(segmentation_errors)
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
#Make lists:
list5=make_align_list(23)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
#Make lists:
list5=make_align_list(23)
#Make lists:
list23=make_align_list(23)
list23
#segmentation errors
listN1=make_align_list(N1)
####
# EXAMPLES derived from experiments
#ex: Col0_26_10_2018_B
N1=23
seq1=make_refseq(N1, alpha, a_sd, i_Gsd, i_noise_pct)
man1=make_measure(seq1, manual_anoise_sd, manual_inoise_sd)
aut1=make_measure(seq1, aut_anoise_sd, aut_inoise_sd)
#segmentation errors
listN1=make_align_list(N1)
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4))
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
bla=2
length(bla)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
sort(c(4,8,5,89,1,0,3))
sort(c(4,8,5,89,1,0,3))[1,2]
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4))
AUT
multiseq_plot(list(aut1, AUT$values))
multiseq_plot(list(aut1, AUT$values), id.names = c("aut1", "seg_errors"))
#See difference with a manual ground truth:
multiseq_plot(list(man1, AUT$values), id.names = c("manual", "seg_errors"))
AUT$I
#See only the segmentation errors:
multiseq_plot(list(aut1, AUT$values), id.names = c("aut1", "seg_errors"))
AUT$O
log(0)
log(1)
##################
##   Libraries  ##
##################
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
N=30
## Divergence angles
#Canonical angle
alpha=137.5
#angle_sd (correspond to real biological variation)
a_sd=18.5
#-> cf Guedon et al. JTB 2013: standard deviation a_sd=18.5
## Internodes
#Internode_noise: gaussian noise: mean=0, sd=i_noise
i_Gsd=0.8
#ratio of the biological noise/variation compared to the value of the internode, expressed in pct
i_noise_pct=75
#Overview of Hard-coded parameters for internodes:
#Exponential decay -> rate
#i_beta=5
#Maximum internode length
#i_max=80
#Likelihood of null internodes: modeled as poisson law with lambda=mean expectancy of the null internode
#i_lambda=1/20
## Permutations
#to be done...
#####
###II. NOISE ON MANUAL MEASURE
#####
#Technical noise has been measured for manual device:
#it looks gaussian, mean error=0 sd ~ 6 / 0.5 for angles/internodes
manual_anoise_sd=6 #(in degree, noise with gaussian distrib. of zero mean)
manual_inoise_sd=0.5 #(in mm, noise with gaussian distrib. of zero mean)
#####
###III. NOISE ON AUTOMATED MEASURE
#####
#From eval v0.4 geom pipe: angles 4times less precise / internodes 5xtimes less precise
aut_anoise_sd=60 #(in degree, noise with gaussian distrib. of zero mean)
aut_inoise_sd=10 #(in mm, noise with gaussian distrib. of zero mean)
#####
###IV. ERRORS of SEGMENTATION
#####
# #Percent of match
# pct=60
# #Count of Merge
# Merge=5
# #Count of split
# Split=2
#####################
#### SIMULATIONS  ###
#####################
#1. Make reference and plot it
REF=make_refseq(N, alpha, a_sd, i_Gsd, i_noise_pct)
seq_plot(REF)
#2. Make a measure of reference and plot it with REF
man_MEAS=make_measure(REF, manual_anoise_sd, manual_inoise_sd)
seq_plot(man_MEAS)
#3. compare the two plots
seq.list=list(REF, man_MEAS)
multiseq_plot(seq.list)
multiseq_plot(seq.list, title = "test")
##################
##   Libraries  ##
##################
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
multiseq_plot(seq.list)
multiseq_plot(seq.list, title = "test")
g_title<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
title_grob <- which(sapply(tmp$grobs, function(x) x$name) == "title")
title <- tmp$grobs[[title_grob]]
return(title)}
library(readr)
Col0_26_10_2018_A_result <- read_csv("Dropbox/Arabidopsis-eval/v0.8/Col0_26_10_2018_A_result.csv")
View(Col0_26_10_2018_A_result)
res<- read_csv("Dropbox/Arabidopsis-eval/v0.8/Col0_26_10_2018_A_result.csv")
rm(Col0_26_10_2018_A_result)
hist(res$Cost)
library(ggplot2)
ggplot(data=res, aes(x=Cost, color=Type))+geom_histogram()
ggplot(data=res, aes(x=Cost, fill=Type))+geom_histogram()
ggplot(data=res, aes(x=Cost, fill=Type))+geom_histogram(color="black")
ggplot(data=res, aes(x=Cost, fill=Type))+geom_histogram(position = "identity", color="black")
ggplot(data=res, aes(x=Cost, fill=Type))+geom_histogram(position = "dodge", color="black")
ggplot(data=res, aes(x=Cost, fill=Type))+
geom_histogram(position = "dodge", color="black", binwidth = 0.05)
ggplot(data=res, aes(x=Cost, fill=Type))+
geom_histogram(position = "dodge", color="black", binwidth = 0.05)+
scale_fill_manual(values = c("green", "orange", "pink"))
ggplot(data=res, aes(x=Cost, fill=Type))+
geom_histogram(position = "dodge", color="black", binwidth = 0.05)+
scale_fill_manual(values = c("darkgreen", "orange", "magenta"))
ggplot(data=res, aes(x=Cost, fill=Type))+
geom_histogram(position = "dodge", color="black", binwidth = 0.05)+
scale_fill_manual(values = c("forestgreen", "orange", "magenta"))
mean(res$Cost)
median(res$Cost)
version()
R_version()
--version
version
load("~/Documents/RDP/MyProjects/Robustness-Phytomere-switch/RNAseq/Analyse_Helixio/Rscript_preliminary_analysis.RData")
library("ggplot2")
#Flowering ctrl
ggplot(data=ctrl_GeneMatrix_long1, aes(x=stage, y=Log2CPM, group=genotype))+
geom_line(aes(color=genotype))+
geom_point(aes(shape=genotype))+
facet_grid(~Locus)
library("ggplot2")
install.packages("ggplot2")
install.packages("crayon")
install.packages("ggplot2")
install.packages("R6")
install.packages("scales")
install.packages("magrittr")
install.packages("tibble")
install.packages("ggplot2")
install.packages("glue")
install.packages("ggplot2")
install.packages("withr")
install.packages("ggplot2")
install.packages("reshape2")
install.packages("Rcpp")
install.packages("plyr")
install.packages("reshape2")
install.packages("stringr")
install.packages("stringi")
install.packages("stringr")
install.packages("reshape2")
install.packages("GenomicFeatures")
install.packages("rtracklayer")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicFeatures")
#To reuse analysis data:
load("~/Documents/RDP/MyProjects/Robustness-Phytomere-switch/RNAseq/Analyse_Helixio/Rscript_preliminary_analysis.RData")
#Flowering ctrl
ggplot(data=ctrl_GeneMatrix_long1, aes(x=stage, y=Log2CPM, group=genotype))+
geom_line(aes(color=genotype))+
geom_point(aes(shape=genotype))+
facet_grid(~Locus)
library("ggplot2")
#Flowering ctrl
ggplot(data=ctrl_GeneMatrix_long1, aes(x=stage, y=Log2CPM, group=genotype))+
geom_line(aes(color=genotype))+
geom_point(aes(shape=genotype))+
facet_grid(~Locus)
install.packages("digest")
#Flowering ctrl
ggplot(data=ctrl_GeneMatrix_long1, aes(x=stage, y=Log2CPM, group=genotype))+
geom_line(aes(color=genotype))+
geom_point(aes(shape=genotype))+
facet_grid(~Locus)
source('~/.active-rstudio-document')
BiocManager::install("GenomicFeatures")
install.packages("optparse")
################################
####   INPUTS / Arguments    ###
################################
require("optparse")
option_list = list(
make_option(c("-f", "--file"), type="character", default=NULL,
help="dataset file name", metavar="character"),
make_option(c("-n", "--noplots"), action="store_true", default=TRUE,
help="do not print plots [default]"),
make_option(c("-p", "--plots"), action="store_false",
dest="noplots", help="Print plots"),
make_option(c("-h", "--help"), action="store_true", default=FALSE,
help=cat(Program_Description))
)
###############
##   Usage   ##
###############
#Rscript test_dtw.R -f input_table.csv -p
Program_Description=c(
'
Script test_dtw.R \n
Description: \n
This scripts generates
-a raw artifical pyllotaxis sequences (angles + internodes) \n
-a derived perturbed sequences because of segmentation errors, given by an input file \n
-the alignment/correspondance between the raw and derived sequences (as tables and optionnaly plots) \n
The input file contains the segmentation error to introduce in the alignment. It is a table, on plant per row, precising the total number of intervals, id of organs gains and ids of organs lost. \n'
)
option_list = list(
make_option(c("-f", "--file"), type="character", default=NULL,
help="dataset file name", metavar="character"),
make_option(c("-n", "--noplots"), action="store_true", default=TRUE,
help="do not print plots [default]"),
make_option(c("-p", "--plots"), action="store_false",
dest="noplots", help="Print plots"),
make_option(c("-h", "--help"), action="store_true", default=FALSE,
help=cat(Program_Description))
)
option_list = list(
make_option(c("-f", "--file"), type="character", default=NULL,
help="dataset file name", metavar="character"),
make_option(c("-n", "--noplots"), action="store_true", default=TRUE,
help="do not print plots [default]"),
make_option(c("-p", "--plots"), action="store_false",
dest="noplots", help="Print plots"),
make_option(c("-h", "--help"), action="store_true", default=FALSE,
help=Program_Description)
)
.libPaths()
find.package("optparse")
1:1
1:2
library()
update.packages(checkBuilt=TRUE)
Oui
update.packages(checkBuilt=TRUE)
library("QTL.gCIMapping.GUI")
QTL.gCIMapping.GUI()
citation()
citation(ggplot2)
citation('ggplot2')
getwd()
setwd("/home/fabfab/Dropbox/Arabidopsis-eval/R_simul-eval/notebooks")
getwd()
root=getwd()
grep("R_simul-eval", root)
basename(root)
dirname(root)
source("~/Dropbox/Arabidopsis-eval/R_simul-eval/source/sim_phyllo_sources.R")
source("~/Dropbox/Arabidopsis-eval/R_simul-eval/source/plot_sequences_sources.R")
source('~/Dropbox/Arabidopsis-eval/R_simul-eval/source/eval_dtw_sources.R')
View(compare_plots)
View(compare_plots)
View(evaluate_align_prediction)
View(evaluate_align_prediction)
View(compare_plots)
View(compare_plots)
