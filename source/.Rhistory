manual_inoise_sd=0.5 #(in mm, noise with gaussian distrib. of zero mean)
#####
###III. NOISE ON AUTOMATED MEASURE
#####
#From eval v0.4 geom pipe: angles 4times less precise / internodes 5xtimes less precise
aut_anoise_sd=60 #(in degree, noise with gaussian distrib. of zero mean)
aut_inoise_sd=10 #(in mm, noise with gaussian distrib. of zero mean)
#####
###IV. ERRORS of SEGMENTATION
#####
# #Percent of match
# pct=60
# #Count of Merge
# Merge=5
# #Count of split
# Split=2
seq=make_refseq(nrow(test$Ialign), alpha, a_sd, i_Gsd, i_noise_pct)
man_MEAS=make_measure(seq, manual_anoise_sd, manual_inoise_sd)
aut_MEAS=make_measure(seq, aut_anoise_sd, aut_inoise_sd)
multiseq_plot(list(seq, man_MEAS, aut_MEAS))
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
seq_remove(test, 1)
View(test$Ialign)
View(test$Oalign)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test, 1)
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
View(aut_MEAS)
seq_insert(test, 1)
seq_append(test,1)
seq_insert(test, 2)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_insert(test, 2)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_insert(test, 2)
seq_insert(test, 1)
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
seq_remove(test,10)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,10)
seq_remove(test,9)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,9)
seq_remove(test,1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,1)
seq_remove(test,9)
seq_remove(test,10)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
seq_remove(test,10)
seq_remove(test,1)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,10),
organ_gain = c(2,3))
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5), )
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5), verbose = TRUE)
unlist(test)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
kikoo=segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
kikoo$values
comp=segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,5))
multiseq_plot(list(seq, man_MEAS, comp$values))
comp$I
multiseq_plot(list(seq, man_MEAS, aut_MEAS, comp$values))
multiseq_plot(list(seq, man_MEAS, aut_MEAS, comp$values), id.names = c("real_biol", "manual", "automated", "with_seg_errors"))
View(segmentation_errors)
segmentation_errors(aut_MEAS, test,
organ_loss = c(1,2,8,10),
organ_gain = c(4,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
#Make lists:
list5=make_align_list(23)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
#Make lists:
list5=make_align_list(23)
#Make lists:
list23=make_align_list(23)
list23
#segmentation errors
listN1=make_align_list(N1)
####
# EXAMPLES derived from experiments
#ex: Col0_26_10_2018_B
N1=23
seq1=make_refseq(N1, alpha, a_sd, i_Gsd, i_noise_pct)
man1=make_measure(seq1, manual_anoise_sd, manual_inoise_sd)
aut1=make_measure(seq1, aut_anoise_sd, aut_inoise_sd)
#segmentation errors
listN1=make_align_list(N1)
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4))
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
bla=2
length(bla)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
sort(c(4,8,5,89,1,0,3))
sort(c(4,8,5,89,1,0,3))[1,2]
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4),
verbose=TRUE)
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4))
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(1,2,21,22,23,24),
organ_gain=c(3,3,4))
AUT
multiseq_plot(list(aut1, AUT$values))
multiseq_plot(list(aut1, AUT$values), id.names = c("aut1", "seg_errors"))
#See difference with a manual ground truth:
multiseq_plot(list(man1, AUT$values), id.names = c("manual", "seg_errors"))
AUT$I
#See only the segmentation errors:
multiseq_plot(list(aut1, AUT$values), id.names = c("aut1", "seg_errors"))
AUT$O
log(0)
log(1)
##################
##   Libraries  ##
##################
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
N=30
## Divergence angles
#Canonical angle
alpha=137.5
#angle_sd (correspond to real biological variation)
a_sd=18.5
#-> cf Guedon et al. JTB 2013: standard deviation a_sd=18.5
## Internodes
#Internode_noise: gaussian noise: mean=0, sd=i_noise
i_Gsd=0.8
#ratio of the biological noise/variation compared to the value of the internode, expressed in pct
i_noise_pct=75
#Overview of Hard-coded parameters for internodes:
#Exponential decay -> rate
#i_beta=5
#Maximum internode length
#i_max=80
#Likelihood of null internodes: modeled as poisson law with lambda=mean expectancy of the null internode
#i_lambda=1/20
## Permutations
#to be done...
#####
###II. NOISE ON MANUAL MEASURE
#####
#Technical noise has been measured for manual device:
#it looks gaussian, mean error=0 sd ~ 6 / 0.5 for angles/internodes
manual_anoise_sd=6 #(in degree, noise with gaussian distrib. of zero mean)
manual_inoise_sd=0.5 #(in mm, noise with gaussian distrib. of zero mean)
#####
###III. NOISE ON AUTOMATED MEASURE
#####
#From eval v0.4 geom pipe: angles 4times less precise / internodes 5xtimes less precise
aut_anoise_sd=60 #(in degree, noise with gaussian distrib. of zero mean)
aut_inoise_sd=10 #(in mm, noise with gaussian distrib. of zero mean)
#####
###IV. ERRORS of SEGMENTATION
#####
# #Percent of match
# pct=60
# #Count of Merge
# Merge=5
# #Count of split
# Split=2
#####################
#### SIMULATIONS  ###
#####################
#1. Make reference and plot it
REF=make_refseq(N, alpha, a_sd, i_Gsd, i_noise_pct)
seq_plot(REF)
#2. Make a measure of reference and plot it with REF
man_MEAS=make_measure(REF, manual_anoise_sd, manual_inoise_sd)
seq_plot(man_MEAS)
#3. compare the two plots
seq.list=list(REF, man_MEAS)
multiseq_plot(seq.list)
multiseq_plot(seq.list, title = "test")
##################
##   Libraries  ##
##################
source("~/Dropbox/Arabidopsis-eval/sim_phyllo_sources.R")
multiseq_plot(seq.list)
multiseq_plot(seq.list, title = "test")
g_title<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
title_grob <- which(sapply(tmp$grobs, function(x) x$name) == "title")
title <- tmp$grobs[[title_grob]]
return(title)}
setwd("~/Dropbox/Arabidopsis-eval/R_simul-eval/source")
source("~/Dropbox/Arabidopsis-eval/R_simul-eval/source/sim_phyllo_sources.R")
#test sequences
O1=data.frame(reference=c(1:10),
modified=c(1:10),
segmentation=c(rep("~",10)))
I1=data.frame(reference=c(1:9),
modified=c(1:9),
dtw=c(rep("~",9)))
#Test lists
test=list(Ialign=I1, Oalign=O1) #10 aligned organs
seq=make_refseq(nrow(test$Ialign), alpha, a_sd, i_Gsd, i_noise_pct)
##################
##   Libraries  ##
##################
source("~/Dropbox/Arabidopsis-eval/R_simul-eval/source/sim_phyllo_sources.R")
N=30
## Divergence angles
#Canonical angle
alpha=137.5
#angle_sd (correspond to real biological variation)
a_sd=18.5
#-> cf Guedon et al. JTB 2013: standard deviation a_sd=18.5
## Internodes
#Internode_noise: gaussian noise: mean=0, sd=i_noise
i_Gsd=0.8
#ratio of the biological noise/variation compared to the value of the internode, expressed in pct
i_noise_pct=75
#Overview of Hard-coded parameters for internodes:
#Exponential decay -> rate
#i_beta=5
#Maximum internode length
#i_max=80
#Likelihood of null internodes: modeled as poisson law with lambda=mean expectancy of the null internode
#i_lambda=1/20
## Permutations
#to be done...
#####
###II. NOISE ON MANUAL MEASURE
#####
#Technical noise has been measured for manual device:
#it looks gaussian, mean error=0 sd ~ 6 / 0.5 for angles/internodes
manual_anoise_sd=6 #(in degree, noise with gaussian distrib. of zero mean)
manual_inoise_sd=0.5 #(in mm, noise with gaussian distrib. of zero mean)
#####
###III. NOISE ON AUTOMATED MEASURE
#####
#From eval v0.4 geom pipe: angles 4times less precise / internodes 5xtimes less precise
aut_anoise_sd=60 #(in degree, noise with gaussian distrib. of zero mean)
aut_inoise_sd=10 #(in mm, noise with gaussian distrib. of zero mean)
#####
###IV. ERRORS of SEGMENTATION
#####
# #Percent of match
# pct=60
# #Count of Merge
# Merge=5
# #Count of split
# Split=2
seq=make_refseq(nrow(test$Ialign), alpha, a_sd, i_Gsd, i_noise_pct)
plot(seq, aes(x=seq$intervals, y=seq$intervals))+geom_point()
ggplot(seq, aes(x=seq$intervals, y=seq$intervals))+geom_point()
ggplot(seq, aes(x=seq$intervals, y=seq$angles))+geom_point()
myplot=ggplot(seq, aes(x=seq$intervals, y=seq$angles))+geom_point()
myplot+ggtitle(label="this is a plot")
g_title<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
title_grob <- which(sapply(tmp$grobs, function(x) x$name) == "title")
title <- tmp$grobs[[title_grob]]
return(title)}
mytitle_grob=g_title(myplot)
mytitle_grob=g_title(myplot+ggtitle(label="this is a plot"))
myplot+ggtitle(label="this is a plot")
myplot=ggplot(seq, aes(x=intervals, y=angles))+geom_point()
myplot+ggtitle(label="this is a plot")
ggplot_gtable(ggplot_build(myplot))
ggplot_gtable(ggplot_build(myplot.title))
myplot.title=myplot+ggtitle(label="this is a plot")
ggplot_gtable(ggplot_build(myplot.title))
tmp. <- ggplot_gtable(ggplot_build(myplot))
which(sapply(tmp$grobs, function(x) x$name) == "title")
which(sapply(tmp.$grobs, function(x) x$name) == "title")
tmp. <- ggplot_gtable(ggplot_build(myplot.title))
tmp. <- ggplot_gtable(ggplot_build(myplot.title))
which(sapply(tmp.$grobs, function(x) x$name) == "title")
tmp.$grobs
sapply(tmp.$grobs, function(x) x$name)
tmp.
seq
seq$factor="factor_level1"
seq
ggplot(seq, aes(x=intervals, y=angles, color=factor))+geom_point()
myplot=ggplot(seq, aes(x=intervals, y=angles, color=factor))+geom_point()
myplot.title=myplot+ggtitle(label="this is a plot")
tmp. <- ggplot_gtable(ggplot_build(myplot))
tmp.
tmp.$name
tmp.$rownames
tmp.$grobs
names(tmp.$grobs)
sapply(tmp.$grobs, function(x) x$name)
str(tmp.)
tmp.$name
tmp.$layout$name
which(sapply(tmp.$grobs, function(x) x$name) == "guide-box")
tmp.$grobs[[15]]
tmp.$grobs[[17]]
tmp.
g_title<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
#title_grob_idx <- which(sapply(tmp$grobs, function(x) x$name) == "title")
title_grob_idx <- which(tmp$layout$name == "title")
title_grob <- tmp$grobs[[title_grob_idx]]
return(title_grob)}
mytitle_grob=g_title(myplot+ggtitle(label="this is a plot"))
mytitle_grob
#Improve display of multisep plot / title separated from plot1 and common for the entire figure
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend=g_legend(myplot)
mytitle_grob=g_title(myplot)
mytitle_grob=g_title(myplot+ggtitle(label="this is a plot"))
grid.arrange(arrangeGrob(myplot.title + theme(legend.position="none"),
myplot.title + theme(legend.position="none"),
nrow=2),
mylegend, nrow=2,heights=c(10, 1))
grid.arrange(arrangeGrob(myplot + theme(legend.position="none"),
myplot + theme(legend.position="none"),
nrow=2),
mylegend, nrow=2,heights=c(10, 1))
grid.arrange(arrangeGrob(myplot + theme(legend.position="none"),
myplot + theme(legend.position="none"),
nrow=2),
mylegend, nrow=2,heights=c(8, 2))
grid.arrange(arrangeGrob(myplot + theme(legend.position="none"),
myplot + theme(legend.position="none"),
nrow=2),
mylegend, mytitle_grob, nrow=3, heights=c(3, 8, 2))
grid.arrange(mytitle_grob,
arrangeGrob(myplot + theme(legend.position="none"),
myplot + theme(legend.position="none"),
nrow=2),
mylegend, nrow=3, heights=c(1, 8, 2))
##test for realigned plots
####
# EXAMPLES derived from experiments
#ex: Col0_26_10_2018_B
N1=23
seq1=make_refseq(N1, alpha, a_sd, i_Gsd, i_noise_pct)
man1=make_measure(seq1, manual_anoise_sd, manual_inoise_sd)
aut1=make_measure(seq1, aut_anoise_sd, aut_inoise_sd)
#segmentation errors
listN1=make_align_list(N1)
AUT=segmentation_errors(seq1, listN1,
organ_loss=c(6,6,12),
organ_gain=c(1,1,15,25,25))
multiseq_plot(list(seq1, AUT$values), align.df = AUT$I, ref.first = TRUE)
multiseq_plot(list(seq1, AUT$values), align.df = AUT$I)
multiseq_plot(list(seq1, AUT$values), align.df = AUT$I, title = "test")
getwd()
####################
#### Body Run  #####
####################
source("~/Dropbox/Arabidopsis-eval/R_simul-eval/source")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(6,6,12),
organ_gain=c(1,1,25,25), verbose = TRUE)
source("~/Dropbox/Arabidopsis-eval/R_simul-eval/source/sim_phyllo_sources.R")
AUT=segmentation_errors(aut1, listN1,
organ_loss=c(6,6,12),
organ_gain=c(1,1,25,25), verbose = TRUE)
##################
##   Libraries  ##
##################
pkgTest <- function(x){
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
source('~/Dropbox/Arabidopsis-eval/R_simul-eval/source/eval_dtw_sources.R', echo=TRUE)
View(compare_plots)
View(compare_plots)
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
library(IRkernel)
library("IRkernel")
IRkernel::installspec(user = FALSE)
sample(5)
wd()
pwd()
getwd()
